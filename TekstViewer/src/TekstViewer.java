
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author yannick.thibos
 */
public class TekstViewer extends javax.swing.JFrame {

    /**
     * Creates new form TekstViewer
     */
    public TekstViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jDialogFont = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxFont = new javax.swing.JComboBox<>();
        jSliderFontSize = new javax.swing.JSlider();
        jButtonOK = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPopupMenuFormat = new javax.swing.JPopupMenu();
        jCheckBoxMenuItemBold = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemItalic = new javax.swing.JCheckBoxMenuItem();
        txtArea = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        bold = new javax.swing.JCheckBoxMenuItem();
        italic = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSetColor = new javax.swing.JMenuItem();
        jMenuItemSetBackColor = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItemSetFont = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jLabel1.setText("Font:");

        jComboBoxFont.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arial", "Times New Roman", "Verdana", "Helvetica" }));

        jSliderFontSize.setMajorTickSpacing(6);
        jSliderFontSize.setMaximum(32);
        jSliderFontSize.setMinimum(6);
        jSliderFontSize.setMinorTickSpacing(1);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabel2.setText("Size:");

        javax.swing.GroupLayout jDialogFontLayout = new javax.swing.GroupLayout(jDialogFont.getContentPane());
        jDialogFont.getContentPane().setLayout(jDialogFontLayout);
        jDialogFontLayout.setHorizontalGroup(
            jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogFontLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogFontLayout.createSequentialGroup()
                        .addComponent(jButtonOK, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialogFontLayout.createSequentialGroup()
                        .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSliderFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jComboBoxFont, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jDialogFontLayout.setVerticalGroup(
            jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogFontLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSliderFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOK)
                    .addComponent(jButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBoxMenuItemBold.setText("Bold");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bold, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBoxMenuItemBold, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBoxMenuItemBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemBoldActionPerformed(evt);
            }
        });
        jPopupMenuFormat.add(jCheckBoxMenuItemBold);

        jCheckBoxMenuItemItalic.setText("Italic");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, italic, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jCheckBoxMenuItemItalic, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        jCheckBoxMenuItemItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemItalicActionPerformed(evt);
            }
        });
        jPopupMenuFormat.add(jCheckBoxMenuItemItalic);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextAreaMouseClicked(evt);
            }
        });
        txtArea.setViewportView(jTextArea);

        jMenu1.setText("File");

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpen);

        jMenuItemClose.setText("Close");
        jMenuItemClose.setEnabled(false);
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemClose);
        jMenu1.add(jSeparator1);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Format");

        bold.setText("Bold");
        bold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldActionPerformed(evt);
            }
        });
        jMenu2.add(bold);

        italic.setText("Italic");
        italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicActionPerformed(evt);
            }
        });
        jMenu2.add(italic);
        jMenu2.add(jSeparator2);

        jMenuItemSetColor.setText("SetColor");
        jMenuItemSetColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetColorActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSetColor);

        jMenuItemSetBackColor.setText("SetBackColor");
        jMenuItemSetBackColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetBackColorActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSetBackColor);
        jMenu2.add(jSeparator3);

        jMenuItemSetFont.setText("Font");
        jMenuItemSetFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetFontActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSetFont);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Info");

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JOptionPane.showMessageDialog(this, "Dit is een zelf geknutselde tekstviewer.", "About..", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Open File Dialog");
        int returnVal = fc.showDialog(this, "Open");
        switch (returnVal) {
            case JFileChooser.APPROVE_OPTION:
                File tekstfile = fc.getSelectedFile();
                BufferedReader buffer = null;
                try {
                    FileReader file = new FileReader(tekstfile);
                    buffer = new BufferedReader(file);
                    boolean eof = false;
                    String deVolledigeTekst = "";
                    while (!eof) {
                        try {
                            String eenLijn = buffer.readLine();
                            if (eenLijn == null) {
                                eof = true;
                            } else {
                                deVolledigeTekst += eenLijn + "\n";
                            }
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        jTextArea.setText(deVolledigeTekst);
                        jMenuItemClose.setEnabled(true);
                    }
                } catch (FileNotFoundException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    if (buffer != null) {
                        try {
                            buffer.close();
                        } catch (IOException e) {
                            System.out.println(e.getMessage());
                        }
                    }
                }
                break;
            case JFileChooser.CANCEL_OPTION:
                break;
            case JFileChooser.ERROR_OPTION:
                JOptionPane.showMessageDialog(this, "Error opening file...", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        jTextArea.setText("");
        jMenuItemClose.setEnabled(false);
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void boldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldActionPerformed
        Font f = jTextArea.getFont();
        int style = f.getStyle();
        if (f.isBold()) {
            style -= Font.BOLD;
        } else {
            style += Font.BOLD;
        }
        Font newFont = f.deriveFont(style);
        jTextArea.setFont(newFont);
    }//GEN-LAST:event_boldActionPerformed

    private void italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicActionPerformed
        Font f = jTextArea.getFont();
        int style = f.getStyle();
        if (f.isItalic()) {
            style -= Font.ITALIC;
        } else {
            style += Font.ITALIC;
        }
        Font newFont = f.deriveFont(style);
        jTextArea.setFont(newFont);
    }//GEN-LAST:event_italicActionPerformed

    private void jMenuItemSetColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetColorActionPerformed
        Color newColor = JColorChooser.showDialog(this, "Chooose foreground colour..", jTextArea.getForeground());
        if (newColor != null) {
            jTextArea.setForeground(newColor);
        }
    }//GEN-LAST:event_jMenuItemSetColorActionPerformed

    private void jMenuItemSetBackColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetBackColorActionPerformed
        Color newColor = JColorChooser.showDialog(this, "Choose background colour", jTextArea.getBackground());
        if (newColor != null) {
            jTextArea.setBackground(newColor);
        }
    }//GEN-LAST:event_jMenuItemSetBackColorActionPerformed

    private void jMenuItemSetFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetFontActionPerformed
        jSliderFontSize.setValue(jTextArea.getFont().getSize());
        jComboBoxFont.setSelectedItem(jTextArea.getFont().getFamily());
        jDialogFont.pack();
        jDialogFont.setVisible(true);
    }//GEN-LAST:event_jMenuItemSetFontActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        Font f = jTextArea.getFont();
        Font newFont = new Font (jComboBoxFont.getSelectedItem().toString(), f.getStyle(), jSliderFontSize.getValue());
        jTextArea.setFont(newFont);
        jDialogFont.setVisible(false);
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        jDialogFont.setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jCheckBoxMenuItemBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemBoldActionPerformed
        boldActionPerformed(evt);
    }//GEN-LAST:event_jCheckBoxMenuItemBoldActionPerformed

    private void jCheckBoxMenuItemItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemItalicActionPerformed
        italicActionPerformed(evt);
    }//GEN-LAST:event_jCheckBoxMenuItemItalicActionPerformed

    private void jTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            jPopupMenuFormat.show(this, (int) this.getMousePosition().getX(), (int) this.getMousePosition().getY());
        }
    }//GEN-LAST:event_jTextAreaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TekstViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TekstViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TekstViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TekstViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TekstViewer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem bold;
    private javax.swing.JCheckBoxMenuItem italic;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemBold;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemItalic;
    private javax.swing.JComboBox<String> jComboBoxFont;
    private javax.swing.JDialog jDialogFont;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemSetBackColor;
    private javax.swing.JMenuItem jMenuItemSetColor;
    private javax.swing.JMenuItem jMenuItemSetFont;
    private javax.swing.JPopupMenu jPopupMenuFormat;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSlider jSliderFontSize;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JScrollPane txtArea;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
